\documentclass[a4paper,12pt]{article}
\usepackage[margin=0.9in]{geometry}
\usepackage{amsmath}
\usepackage{lastpage}
\usepackage{fancyhdr}
\setlength{\headheight}{15pt}
\usepackage{url} 
\usepackage{hyperref}
\usepackage{graphics}
\usepackage{verbatim}
\usepackage{booktabs}
\usepackage{setspace}
\usepackage[document]{ragged2e}
\usepackage{color}

\definecolor{Blue}{rgb}{0,0,1}
\definecolor{Red}{rgb}{1,0,0}
\definecolor{magenta}{rgb}{1,0,.6}
\definecolor{hotpink}{rgb}{1,0,0.5}
\definecolor{darkred}{rgb}{.75,0,0}

%\usepackage{fancyvrb}
\usepackage{listings}

\renewcommand{\headrulewidth}{0.5pt}
\renewcommand{\footrulewidth}{0pt}
\setlength{\parskip}{4mm}

\setlength{\headheight}{15pt}
%\doublespacing
\onehalfspacing

\pagestyle{fancyplain}



\lhead[]{\bf Reference curves for MUAC using Box-Cox Method}
\rhead[]{\bf Lazarus Mramba, Jay Berkely, Greg Fegan}
\chead[]{\bf }
\cfoot{}
\rfoot{\thepage\ of \pageref{LastPage}}
\lfoot{Summer, 2014}

\pagestyle{fancy}
\setlength{\headheight}{15.2pt}

\usepackage{Sweave}

\DefineVerbatimEnvironment{Sinput}{Verbatim} {
commentchar=@,
frame=lines, label=\textrm{\bf R code},  
framesep=12pt, fontshape=sl,formatcom=\color{Blue}, commandchars=\\\{\}}
\DefineVerbatimEnvironment{Soutput}{Verbatim}{frame=leftline}
\DefineVerbatimEnvironment{Scode}{Verbatim}{fontseries=bc}


\begin{document}
\SweaveOpts{concordance=TRUE}


\newpage 
\pagenumbering{roman}
\setcounter{page}{1}

\tableofcontents
\pagestyle{plain}
\listoffigures
\listoftables

\section{Modified R Functions from GAMLSS}

<<echo=FALSE,results=hide>>=
setwd("C:\\Users\\lmramba\\Dropbox\\Muac_2013\\new_2014")

objects()
rm(list=ls(all=TRUE))
gc()
dir(pattern=".dta")
@

 Read in the NHANES data 
<<results=hide>>=
require(epicalc,warn.conflicts = FALSE)
require(gamlss,warn.conflicts = FALSE)
require(lattice,warn.conflicts = FALSE)
require(car,warn.conflicts = FALSE)
require(xtable,warn.conflicts = FALSE)
require(foreign,warn.conflicts = FALSE)
@

\section{modified functions from gamlss}

<<results=hide>>=
mycent<-function (obj, xvar = NULL, 
    cent = c(1,3,5,15,25,50,75,85,95,97,99), legend = TRUE,
    ylab = "y", xlab = "x", main = NULL, 
  main.gsub = "@", xleg = min(xvar), 
  yleg = max(obj$y), xlim = range(xvar), 
  ylim = range(obj$y), save = FALSE, plot = TRUE, points = TRUE, 
  pch = "+", col = "blue", col.centiles = 1:length(cent) + 
  2, lty.centiles = 1, lwd.centiles = 1, ...) 
{
  if (!is.gamlss(obj)) 
    stop(paste("This is not an gamlss object", "\n", ""))
  if (is.null(xvar)) 
    stop(paste("The xvar argument is not specified", "\n", 
               ""))
  fname <- obj$family[1]
  qfun <- paste("q", fname, sep = "")
  Title <- paste("Centile curves using", fname, sep = " ")
  main <- if (is.null(main)) 
    paste("Centile curves using", fname, sep = " ")
  else gsub(main.gsub, Title, main)
  oxvar <- xvar[order(xvar)]
  oyvar <- obj$y[order(xvar)]
  if (is.matrix(obj$y)) {
    oyvar <- obj$y[, 1][order(xvar)]
    ylim <- range(obj$y[, 1])
    yleg = max(obj$y[, 1])
  }
  if (plot) {
    lty.centiles <- rep(lty.centiles, length(cent))
    lwd.centiles <- rep(lwd.centiles, length(cent))
    col.centiles <- rep(col.centiles, length(cent))
    if (points == TRUE) {
      plot(oxvar, oyvar, type = "p", col = col, pch = pch, 
           xlab = xlab, ylab = ylab, xlim = xlim, ylim, 
           ...)
    }
    else {
      plot(oxvar, oyvar, type = "n", col = col, pch = pch, 
           xlab = xlab, ylab = ylab, xlim = xlim, ylim, 
           ...)
    }
    title(main)
  }
  col <- 3
  lpar <- length(obj$parameters)
  ii <- 0
  per <- rep(0, length(cent))
  for (var in cent) {
    if (lpar == 1) {
      newcall <- call(qfun, var/100,
      mu = fitted(obj, "mu")[order(xvar)])
    }
    else if (lpar == 2) {
      newcall <- call(qfun, var/100, mu = fitted(obj, "mu")[order(xvar)], 
                      sigma = fitted(obj, "sigma")[order(xvar)])
    }
    else if (lpar == 3) {
      newcall <- call(qfun, var/100, mu = fitted(obj, "mu")[order(xvar)], 
                      sigma = fitted(obj,
                    "sigma")[order(xvar)], nu = fitted(obj,"nu")[order(xvar)])
    }
    else {
      newcall <- call(qfun, var/100, mu = fitted(obj, "mu")[order(xvar)], 
                      sigma = fitted(obj, 
          "sigma")[order(xvar)], nu = fitted(obj, 
             "nu")[order(xvar)], tau = fitted(obj, "tau")[order(xvar)])
    }
    ii <- ii + 1
    ll <- eval(newcall)
    if (plot) {
      lines(oxvar, ll, col = col.centiles[ii], lty = lty.centiles[ii], 
            lwd = lwd.centiles[ii], ...)
    }
    per[ii] <- (1 - sum(oyvar > ll)/length(oyvar)) * 100
    if (!save) 
      cat("% of cases below ", var, "centile is ", per[ii], 
          "\n")
  }
  if (plot) {
    if (legend == TRUE) 
      legend(list(x = xleg, y = yleg), legend = cent, col = col.centiles, 
             lty = lty.centiles, lwd = lwd.centiles, ncol = 1, 
             ...)
  }
  if (save) {
    #return(cbind(cent, per))
    TAU=tau; L=nu;Median=mu;S=sigma
    return(cbind(L,Median,S,cent, per))
  }
}

@

<<results=hide>>=
mycent.pred<-function(
  obj, type = c("centiles", "z-scores", "standard-centiles"), 
    xname = NULL, xvalues = NULL, power = NULL, yval = NULL, 
  cent = c(1,3,5,15,25,50,75,85,95,97,99), 
dev = c(-4, -3, -2, -1, 0, 1, 2, 3, 4),
  plot = FALSE, legend = TRUE, 
                       ...) 
{
  calc.cent <- function(xvar, cent) {
    o <- order(xvar)
    mat <- xvar[o]
    cent <- cent
    for (var in cent) {
      if (lpar == 1) {
        newcall <- call(qfun, var/100, mu = mu[o])
      }
      else if (lpar == 2) {
        newcall <- call(qfun, var/100, mu = mu[o], sigma = sigma[o])
      }
      else if (lpar == 3) {
        newcall <- call(qfun, var/100, mu = mu[o], sigma = sigma[o], 
                        nu = nu[o])
      }
      else {
        newcall <- call(qfun, var/100, mu = mu[o], sigma = sigma[o], 
                        nu = nu[o], tau = tau[o])
      }
      ll <- eval(newcall)
      mat <- cbind(mat, ll)
    }
    mat <- as.data.frame(mat)
    nnn <- paste("C", as.character(cent), sep = "")
    names(mat) <- c(xname, nnn)
    return(mat)
  }
  plot.mat <- function(mat, cent, legend, ...) {
    lcent <- dim(mat)[2]
    xleg <- min(mat[, 1])
    yleg <- max(mat[, 2:lcent])
    plot(mat[, 1], mat[, 2], type = "n", ...)
    for (i in 2:lcent) lines(mat[, 1], mat[, i], col = i)
    if (legend) 
      legend(list(x = xleg, y = yleg), 
      legend = cent, col = c(2,3, 4, 5, 6, 7, 8, 9, 10,
        11, 12), lty = 1, ncol = 1, bg = "white")
    invisible()
  }
  if (!is.gamlss(obj)) 
    stop(paste("This is not an gamlss object", "\n", ""))
  if (is.null(xvalues)) 
    stop(paste("The xvalues  argument is not specified", 
               "\n", ""))
  if (is.null(xname)) 
    stop(paste("The xname argument is not specified", "\n", 
               ""))
  if (!is.character(xname)) 
    stop(paste("The xname argument is not a character", "\n", 
               ""))
  xvar <- if (!is.null(power)) 
    xvar <- xvalues^power
  else xvalues
  newx <- data.frame(xvar)
  colnames(newx) <- xname
  lpar <- length(obj$parameters)
  if ("mu" %in% obj$parameters) {
    if (is.null(obj$mu.fix)) 
      mu <- predict(obj, what = "mu", newdata = newx, type = "response", 
                    ...)
    else if (obj$mu.fix == TRUE) 
      mu <- rep(fitted(obj, "mu")[1], length(xvar))
  }
  if ("sigma" %in% obj$parameters) {
    if (is.null(obj$sigma.fix)) 
      sigma <- predict(obj, what = "sigma", newdata = newx, 
                       type = "response", ...)
    else if (obj$sigma.fix == TRUE) 
      sigma <- rep(fitted(obj, "sigma")[1], length(xvar))
  }
  if ("nu" %in% obj$parameters) {
    if (is.null(obj$nu.fix)) 
      nu <- predict(obj, what = "nu", newdata = newx, type = "response", 
                    ...)
    else if (obj$nu.fix == TRUE) 
      nu <- rep(fitted(obj, "nu")[1], length(xvar))
  }
  if ("tau" %in% obj$parameters) {
    if (is.null(obj$tau.fix)) 
      tau <- predict(obj, what = "tau", newdata = newx, 
                     type = "response", ...)
    else if (obj$tau.fix == TRUE) 
      tau <- rep(fitted(obj, "tau")[1], length(xvar))
  }
  type <- match.arg(type)
  if (type == "centiles") {
    fname <- obj$family[1]
    qfun <- paste("q", fname, sep = "")
    xvar <- xvalues
    mat <- calc.cent(xvar = xvar, cent = cent)
    if (plot) 
      plot.mat(mat, cent, legend, ...)
    #return(mat)
    TAU=tau;L=nu;Median=mu;S=sigma;Age<-mat[,1]
    return(cbind(Age,L,Median,S,mat[,-1]))
  }
  if (type == "z-scores") {
    if (is.null(yval)) 
      stop("the y values should be set if type=z-scores is used")
    if (length(yval) != length(xvalues)) 
      stop("length of xvalues and yval is not the same")
    fname <- obj$family[1]
    qfun <- paste("p", fname, sep = "")
    if (lpar == 1) {
      newcall <- call(qfun, yval, mu = mu)
    }
    else if (lpar == 2) {
      newcall <- call(qfun, yval, mu = mu, sigma = sigma)
    }
    else if (lpar == 3) {
      newcall <- call(qfun, yval, mu = mu, sigma = sigma, 
                      nu = nu)
    }
    else {
      newcall <- call(qfun, yval, mu = mu, sigma = sigma, 
                      nu = nu, tau = tau)
    }
    cdf <- eval(newcall)
    rqres <- qnorm(cdf)
    return(rqres)
  }
  if (type == "standard-centiles") {
    cent <- pnorm(dev) * 100
    fname <- obj$family[1]
    qfun <- paste("q", fname, sep = "")
    xvar <- xvalues
    mat <- calc.cent(xvar = xvar, cent = cent)
    nnn <- paste(as.character(dev), sep = "")
    names(mat) <- c(xname, nnn)
    if (plot) 
      plot.mat(mat, dev, legend, ...)
    #return(mat)
    TAU=tau;L=nu;Median=mu;S=sigma;Age<-mat[,1]
    return(cbind(Age,L,Median,S,mat[,-1]))
  }
}
@


\section{Reading NHANES data}

<<>>=
d2<-read.dta("hes2hes3nhanes1.dta")
attach(d2)
des(d2)
str(d2)
summ(d2)
@

Convert muac to cm and age to months.
Drop if age is less than 2 and greater than 25 

<<>>=
d2$muac<-d2$muac/10 # convert to mm
d2$agem<-d2$agey*12 # convert age to months
summ(d2)
@

Keep data only for ages 2-25 years
<<>>=
d2=d2[d2$agem>=24 & d2$agem<=300,c(5,1,9)]
summ(d2)
tab1(d2$sex,graph=FALSE)
d2$sex<-factor(d2$sex,labels=c("Female","Male"))
tab1(d2$sex,graph=FALSE)
@


\section{Create two datasets, one for boys and the other for girls}
<<>>=
boysd=d2[d2$sex=="Male",]
des(boysd);summ(boysd)
girlsd=d2[d2$sex=="Female",]
des(girlsd);summ(girlsd)
@


\section{Fitting models, calculating Z scores}

\subsection{Data Explanatory Analysis}

<<fig=TRUE,include=TRUE,label=girls1>>=
X11(height=8,width=8)
par(mfrow=c(2,2))
hist(d2$muac, main="MUAC distribution", xlab='MUAC (cm)')
hist(d2$agem, main="Age distribution", xlab="Age (months)")
plot(muac ~ agem, data = girlsd,ylab="MUAC (cm)", xlab="Age (months)",pch="x",col="grey",
     main="Girls data",ylim=c(0,50))
plot(muac ~ agem, data = boysd,ylab="MUAC (cm)", xlab="Age (months)",pch="x",col="grey",
     main="Boys data", ylim=c(0,50))
par(mfrow=c(1,1))
@

<<fig=TRUE,include=TRUE,label=bxplot>>=
require(ggplot2)
qplot(factor(d2$sex), d2$muac, data=d2, geom=c("boxplot"),
      main="Arm Circumference",fill=factor(d2$sex),
      xlab="Gender", ylab="Muac (mm)")
@

\subsection{Model Selection}

Boys model selection
<<fig=TRUE,include=TRUE,label=model1A>>=
par(mar=c(5.1, 4.1, 4.1, 6.1), xpd=TRUE)
m1 <- lms(muac,agem , data=boysd, n.cyc=30)
legend(320,50, c("0.3","2.3","9.2","25.1","49.3","74.7","91.2","97.8","99.6"), fill=(3:11), horiz=FALSE)

@
Note that BCT has been selected as the best other than BCCG and BCPE.


\subsection{Generating Z-scores}

Generating Z-scores for both of the datasets seperately
starting with the female dataset.

<<>>=
# Girls model selection and fitting the model for boys
hf1<-gamlss(muac~cs(agem),  sigma.fo=~cs(agem), nu.fo=~cs(agem),tau.fo=~cs(agem),
            data=girlsd,   family=BCT)
hf0<-gamlss(muac~cs(agem),  sigma.fo=~cs(agem), nu.fo=~cs(agem),tau.fo=~cs(agem),
            data=girlsd,   family=BCPE)
AIC(hf1,hf0,k=3)
GAIC(hf1,hf0,k=3)
@


<<>>=
# Boys model selection and fitting the model for boys
hm1<-gamlss(muac~cs(agem),nu.fo=~cs(agem),tau.fo=~cs(agem),
            sigma.fo=~cs(agem), data=boysd, family=BCT)
hm0<-gamlss(muac~cs(agem),nu.fo=~cs(agem),tau.fo=~cs(agem),
            sigma.fo=~cs(agem), data=boysd, family=BCPE)
AIC(hm1,hm0,k=3)
GAIC(hm1,hm0,k=3)
@

Use model $hf1$ and $hm1$ to generate the initial $Z$ scores
<<>>=
## Boys adata
newym <- boysd$muac; length(newym)
newxm <- boysd$agem; length(newxm)
summ(newxm,graph=FALSE)
summ(newym,graph=FALSE)

## Zscores for the whole dataset for boys
males.Zscores <- centiles.pred(hm1, xname="agem", xvalues=newxm, yval=newym, type="z-scores")
malesD<-cbind(boysd, males.Zscores)
summ(malesD)
@

<<>>=
## Girls data
newyf <- girlsd$muac; length(newyf)
newxf <- girlsd$agem; length(newxf)
summ(newxf,graph=FALSE)
summ(newyf,graph=FALSE)
## Zscores for every individual in the girls dataset
females.Zscores <- centiles.pred(hf1, xname="agem", xvalues=newxf, yval=newyf,type="z-scores")
femalesD<-cbind(girlsd, females.Zscores)
summ(femalesD) 
@


Removing individulas if Z scores >+3SD or <-3SD.
<<>>=
## Boys dataset
malesDreduced<-malesD[males.Zscores<= 3.0 & males.Zscores >= -3.0,]
summ(malesDreduced) 
@

Females dataset 
<<>>=
## Girls dataset
femalesDreduced<-femalesD[females.Zscores<= 3.0 & females.Zscores >= -3.0,]
summ(femalesDreduced) 
@

\section{Use simulated data}

<<>>=
data1=read.dta("sim12000.dta")
summ(data1)
data1$agem=data1$age/30.4167
summ(data1) 
tab1(data1$sex,graph=FALSE)
@

Split the simulated data into boys and girls datasets
<<>>=
sim.boys=data1[data1$sex=="Male",]
des(sim.boys);summ(sim.boys)
sim.girls=data1[data1$sex=="Female",]
des(sim.girls);summ(sim.girls)
@


prepare boys for merging
<<>>=
sim.boys$males.Zscores<-sim.boys$z
summ(sim.boys) 
sim.boys<-sim.boys[,c(2,7,8,9)]
summ(sim.boys)
@

prepare girls for merging
<<>>=
summ(sim.girls)
sim.girls$females.Zscores<-sim.girls$z
summ(sim.girls) 
sim.girls<-sim.girls[,c(2,7, 8,9)]
summ(sim.girls)
@


Merging the boys datasets
<<>>=
summ(sim.boys)
sim.boys$sex<-as.numeric(2) # replace 1's with 2's for uniformity
summ(sim.boys)
summ(malesDreduced)

merged.boys=rbind(sim.boys,malesDreduced)
merged.boys$agem = round(merged.boys$agem,1)
merged.boys$muac = round(merged.boys$muac,1)
merged.boys$males.Zscores = round(merged.boys$males.Zscores,0)
summ(merged.boys)
write.csv(merged.boys,file="merged.boys.csv")
@


\section{Merging the girls datasets}
<<>>=
summ(sim.girls)
sim.girls$sex<-1
summ(sim.girls)
summ(femalesDreduced)
merged.girls=rbind(sim.girls,femalesDreduced)
merged.girls$agem = round(merged.girls$agem,1)
merged.girls$muac = round(merged.girls$muac,1)
merged.girls$females.Zscores = round(merged.girls$females.Zscores,0)
summ(merged.girls)
write.csv(merged.girls,file="merged.girls.csv")
@

\subsection{Model Selection of Merged Dataset}

<<>>=
#newym <- merged.boys$muac; length(newym)
#newxm <- merged.boys$agem; length(newxm)
m1<-gamlss(muac~cs(agem),sigma.fo=~cs(agem), nu.fo=~cs(agem),tau.fo=~cs(agem),data=merged.boys, family=BCPE)
extractAIC(m1)
#m2<-gamlss(muac~cs(agem),sigma.fo=~cs(agem),nu.fo=~cs(agem),tau.fo=~cs(agem), data=merged.boys, family=BCT)
#AIC(m1,m2)
#         df      AIC
# m1 19.99839 71894.26
# m2 20.00025 71907.46

@


Girls dataset
<<>>=
#newyf <- merged.girls$muac; length(newyf)
#newxf <- merged.girls$agem; length(newxf)
f1<-gamlss(muac~cs(agem),sigma.fo=~cs(agem),nu.fo=~cs(agem),tau.fo=~cs(agem), data=merged.girls, family=BCPE)
extractAIC(f1)
#f2<-gamlss(muac~cs(agem),sigma.fo=~cs(agem),nu.fo=~cs(agem),tau.fo=~cs(agem), data=merged.girls, family=BCT)

# AIC(f1,f2)
  #       df      AIC
# f1 19.99873 76417.51
# f2 19.99997 76428.32
@

\subsection{Diagnostic plots: Worm Plots}

<<fig=TRUE,include=TRUE,label=plot1>>=
plot(m1)
@

<<fig=TRUE,include=TRUE,label=plot2>>=
plot(f1)
@


<<fig=TRUE,include=TRUE,label=wormplot1>>=
wp(f1,ylim.all=1,xlim.all=6)
@

<<fig=TRUE,include=TRUE,label=wormplot2>>=
wp(m1,ylim.all=3,xlim.all=6)
@


\section{Generate WHO-like Tables of Predict Z-scores with LMS}

Create a table similar to the WHO for children between 5 years (60 months) to 19 years (228 months).
<<>>=
newagem<-60:228
@

<<fig=TRUE,include=TRUE,label=zscoresBoys>>=
zm<-mycent.pred(m1, xname="agem",xvalues=60:228,plot=TRUE,
                legend=FALSE,type="standard-centiles",ylim=c(10,50),xlim=c(60,230),
                dev=c(-3,-2,-1,0,1,2,3),
                xlab="Age (Months)",
                ylab="MUAC (cm)", 
                main="Z-values for boys")
legend("topleft", c("-3","-2","-1","0", "1","2","3"), fill=c(2:8), horiz=FALSE)
@

<<fig=TRUE,include=TRUE,label=zscoresgirls>>=
zf<-mycent.pred(f1, xname="agem",xvalues=60:228,plot=TRUE,ylim=c(10,50),xlim=c(60,230),
                legend=FALSE,  type="standard-centiles",
                dev=c(-3,-2,-1,0,1,2,3),xlab="Age (Months)",
                ylab="MUAC (cm)", main="Z-values for girls")
legend("topleft", c("-3","-2","-1","0", "1","2","3"), fill=c(2:8), horiz=FALSE)
@

\begin{scriptsize}
<<results=tex>>=
require(xtable)
xtable(zm,caption = "Boys Z-scores")
@
\end{scriptsize}

\begin{scriptsize}
<<results=tex>>=
xtable(zf,caption = "Girls Z-scores")
@
\end{scriptsize}


<<echo=FALSE,results=hide>>=
write.csv(zm, file = "final_table_male_zscores.csv")
write.csv(zf, file = "final_table_female_zscores.csv")
@

 \section{Generating Percentile Curves and Tables with LMS}
 
\subsection{Mofifying percentile function from GAMLSS} 

<<echo=FALSE>>=
myper.pred<-function (
  obj, type = c("centiles", "z-scores", "standard-centiles"), 
   xname = NULL, xvalues = NULL, power = NULL, yval = NULL, 
   cent = c(1,3,5,15,25,50,75,85,95,97,99), 
   dev = c(-4, -3, -2, -1, 0, 1, 2, 3, 4), plot = FALSE, legend = TRUE, ...) 
{
  calc.cent <- function(xvar, cent) {
    o <- order(xvar)
    mat <- xvar[o]
    cent <- cent
    for (var in cent) {
      if (lpar == 1) {
        newcall <- call(qfun, var/100, mu = mu[o])
      }
      else if (lpar == 2) {
        newcall <- call(qfun, var/100, mu = mu[o], sigma = sigma[o])
      }
      else if (lpar == 3) {
        newcall <- call(qfun, var/100, mu = mu[o], sigma = sigma[o], 
                        nu = nu[o])
      }
      else {
        newcall <- call(qfun, var/100, mu = mu[o], sigma = sigma[o], 
                        nu = nu[o], tau = tau[o])
      }
      ll <- eval(newcall)
      mat <- cbind(mat, ll)
    }
    mat <- as.data.frame(mat)
    nnn <- paste("C", as.character(cent), sep = "")
    names(mat) <- c(xname, nnn)
    return(mat)
  }
  plot.mat <- function(mat, cent, legend, ...) {
    lcent <- dim(mat)[2]
    xleg <- min(mat[, 1])
    yleg <- max(mat[, 2:lcent])
    plot(mat[, 1], mat[, 2], ylim = c(min(mat[, 2:lcent]), 
    max(mat[, 2:lcent])), type = "n", ...)
    for (i in 2:lcent) lines(mat[, 1], mat[, i], col = i)
    if (legend) 
      legend(list(x = xleg, y = yleg), legend = cent, 
    col = c(2,3, 4, 5, 6, 7, 8, 9, 10, 11, 12), lty = 1, ncol = 1, bg = "white")
    invisible()
  }
  if (!is.gamlss(obj)) 
    stop(paste("This is not an gamlss object", "\n", ""))
  if (is.null(xvalues)) 
    stop(paste("The xvalues  argument is not specified", 
               "\n", ""))
  if (is.null(xname)) 
    stop(paste("The xname argument is not specified", "\n", 
               ""))
  if (!is.character(xname)) 
    stop(paste("The xname argument is not a character", "\n", 
               ""))
  xvar <- if (!is.null(power)) 
    xvar <- xvalues^power
  else xvalues
  newx <- data.frame(xvar)
  colnames(newx) <- xname
  lpar <- length(obj$parameters)
  if ("mu" %in% obj$parameters) {
    if (is.null(obj$mu.fix)) 
      mu <- predict(obj, what = "mu", newdata = newx, type = "response", 
                    ...)
    else if (obj$mu.fix == TRUE) 
      mu <- rep(fitted(obj, "mu")[1], length(xvar))
  }
  if ("sigma" %in% obj$parameters) {
    if (is.null(obj$sigma.fix)) 
      sigma <- predict(obj, what = "sigma", newdata = newx, 
                       type = "response", ...)
    else if (obj$sigma.fix == TRUE) 
      sigma <- rep(fitted(obj, "sigma")[1], length(xvar))
  }
  if ("nu" %in% obj$parameters) {
    if (is.null(obj$nu.fix)) 
      nu <- predict(obj, what = "nu", newdata = newx, type = "response", 
                    ...)
    else if (obj$nu.fix == TRUE) 
      nu <- rep(fitted(obj, "nu")[1], length(xvar))
  }
  if ("tau" %in% obj$parameters) {
    if (is.null(obj$tau.fix)) 
      tau <- predict(obj, what = "tau", newdata = newx, 
                     type = "response", ...)
    else if (obj$tau.fix == TRUE) 
      tau <- rep(fitted(obj, "tau")[1], length(xvar))
  }
  type <- match.arg(type)
  if (type == "centiles") {
    fname <- obj$family[1]
    qfun <- paste("q", fname, sep = "")
    xvar <- xvalues
    mat <- calc.cent(xvar = xvar, cent = cent)
    if (plot) 
      plot.mat(mat, cent, legend, ...)
    #return(mat)
    TAU=tau;L=nu;Median=mu;S=sigma;Age<-mat[,1]
    return(cbind(Age,L,Median,S,mat[,-1]))
  }
  if (type == "z-scores") {
    if (is.null(yval)) 
      stop("the y values should be set if type=z-scores is used")
    if (length(yval) != length(xvalues)) 
      stop("length of xvalues and yval is not the same")
    fname <- obj$family[1]
    qfun <- paste("p", fname, sep = "")
    if (lpar == 1) {
      newcall <- call(qfun, yval, mu = mu)
    }
    else if (lpar == 2) {
      newcall <- call(qfun, yval, mu = mu, sigma = sigma)
    }
    else if (lpar == 3) {
      newcall <- call(qfun, yval, mu = mu, sigma = sigma, 
                      nu = nu)
    }
    else {
      newcall <- call(qfun, yval, mu = mu, sigma = sigma, 
                      nu = nu, tau = tau)
    }
    cdf <- eval(newcall)
    rqres <- qnorm(cdf)
    return(rqres)
  }
  if (type == "standard-centiles") {
    cent <- pnorm(dev) * 100
    fname <- obj$family[1]
    qfun <- paste("q", fname, sep = "")
    xvar <- xvalues
    mat <- calc.cent(xvar = xvar, cent = cent)
    nnn <- paste(as.character(dev), sep = "")
    names(mat) <- c(xname, nnn)
    if (plot) 
      plot.mat(mat, dev, legend, ...)
    #return(mat)
    TAU=tau;L=nu;Median=mu;S=sigma;Age<-mat[,1]
    return(cbind(Age,L,Median,S,mat[,-1]))
  }
}
@

<<fig=TRUE,include=TRUE,label=percBoys>>=
par(mar=c(5.1, 4.1, 4.1, 6.1), xpd=TRUE)
matm <- myper.pred(m1, xname="agem", plot=TRUE,xvalues=60:228,legend=FALSE,
                    xlab="Age (Months)",ylab="MUAC (cm)",
                    main="Boys percentiles")
legend(240,40, c("1","3","5","15","25","50","75","85","95","97","99"), fill=(2:12), horiz=FALSE)
@


<<fig=TRUE,include=TRUE,label=percGirls>>=
par(mar=c(5.1, 4.1, 4.1, 6.1), xpd=TRUE)
matf <- myper.pred(f1, xname="agem", plot=TRUE,legend=FALSE,  xvalues=60:228,
                    xlab="Age (Months)",ylab="MUAC (cm)",
                    main="Girls percentiles")
legend(240,40, c("1","3","5","15","25","50","75","85","95","97","99"), fill=(2:12), horiz=FALSE)
@


\begin{scriptsize}
<<results=tex>>=
xtable(matm, caption = "Boys Percentile Curves")
@
\end{scriptsize}

\begin{scriptsize}
<<results=tex>>=
xtable(matf, caption = "Girls Percentile Curves")
@
\end{scriptsize}


<<echo=FALSE,results='hide'>>=
write.csv(matm, file = "final_table_male_percentiles.csv")
write.csv(matf, file = "final_table_female_percentiles.csv")
@

\section{Arrow Dataset}

\subsection{Explanatory Data Analysis}
<<>>=
d2<-read.dta("arrow.dta")
des(d2)
arrow<-d2[,c(1,2,14,24)]
des(arrow)
head(arrow)
str(arrow)
summ(arrow)
arrow$muac<-arrow$muac/10 # convert to cm
arrow$agem<-arrow$agey*12 # convert age to months
summ(arrow)
@

<<fig=TRUE,include=TRUE,label=arrow1>>=
plot(muac ~ agem, data = arrow,ylab="MUAC (cm)", xlab="Age (months)",col="grey",pch=17, main="Arrow data")
@

<<fig=TRUE,include=TRUE,label=bxplot>>=
require(ggplot2)
qplot(factor(arrow$sex), arrow$muac, data=arrow, geom=c("boxplot", "jitter"),
      main="Arrow data",fill=factor(arrow$sex),
      xlab="Gender", ylab="Muac (mm)")
@

<<>>=
###################################
## Boys subset of the data
tab1(arrow$sex,graph=FALSE)

boys<-arrow[arrow$sex=="Male",]
des(boys)
summ(boys)
@


\subsection{Predict Z-scores for the whole dataset based on the merged dataset}
<<>>=
newyarrowm <- boys$muac; length(newyarrowm)
newxarrowm <- boys$agem; length(newxarrowm)
## They are 341 males in this dataset
summ(newxarrowm,graph=FALSE) # age summary
summ(newyarrowm,graph=FALSE) # muac values

zscores_m <- mycent.pred(m1, xname="agem",xvalues=newxarrowm,yval=newyarrowm, type="z-scores")

summ(boys, graph=FALSE)
boysdf<-data.frame(boys, zscores_m)

summ(boysdf)
boysdf[boysdf$zscores_m=="-Inf",]

summ(boysdf[-257,],na.rm=TRUE)

#     id  sex muac     agey     agem zscores_m
#495 821 Male  9.5 7.627652 91.53183      -Inf

write.csv(boysdf, file="final_Arrow_boys_muac_zscores.csv")
@

<<>>=
# females subset of the data

des(arrow)
girls<-arrow[arrow$sex=="Female",]
des(girls)
tab1(arrow$sex,graph=FALSE)
summ(girls,graph=FALSE)

newyarrowf <- girls$muac; length(newyarrowf)
newxarrowf <- girls$agem; length(newxarrowf)
summ(newxarrowf,graph=FALSE)
summ(newyarrowf,graph=FALSE)
@

<<>>=
zscores_f <- centiles.pred(f1, xname="agem",xvalues=newxarrowf,yval=newyarrowf, type="z-scores")
girlsdf<-data.frame(girls, zscores_f)

summ(girlsdf)
@

<<echo=FALSE,results=hide>>=
write.csv(girlsdf, file="final_Arrow_girls_muac_zscores.csv")
@




\end{document}